
// Implementation of a dictionary using an array and sequential search
// The array will be dynamically resized if necessary

#include <stdlib.h>
#include <string.h>

#include "array-dictionary.h"

// Constructor
ArrayDictionary::ArrayDictionary()
{
	maxNumber = 2;
	currentNumber = 0;
	array = (ArrayDictionaryNode *) malloc(maxNumber * sizeof(ArrayDictionaryNode));
}

// Add a record to the dictionary. Returns false if key already exists
bool
ArrayDictionary::addRecord( KeyType key, DataType record)
{
	// Try to find record first
	for (int i = 0; i < currentNumber; i++) {
		if (!strcmp(array[i].key,key)) {
			// Found key. Substitute value
			array[i].data = record;
			return false;
		}
	}
	if (currentNumber==maxNumber) {
		// Need to enlarge
		maxNumber *=2;
		array = (ArrayDictionaryNode *)
			realloc(array, maxNumber * sizeof(ArrayDictionaryNode));
	}
	array[currentNumber].key = strdup(key);
	array[currentNumber].data = record;
	currentNumber++;
	
	return true;
}

// Find a key in the dictionary and return corresponding record or NULL
DataType
ArrayDictionary::findRecord( KeyType key)
{
	// Try to find record first
	for (int i = 0; i < currentNumber; i++) {
		if (!strcmp(array[i].key,key)) {
			// Found key. Substitute value
			return array[i].data;
		}
	}
	return NULL;
}

// Removes one element from the table
bool
ArrayDictionary::removeElement(KeyType key)
{
	// First find element to delete
	int i;
	for (i = 0; i < currentNumber; i++) {
		if (!strcmp(array[i].key,key)) {
			break;
		}
	}

	if ( i == currentNumber) {
		// Key not found
		return false;
	}

	// Shift elements
	for (;i<currentNumber-1;i++) {
		array[i]= array[i+1];
	}
	currentNumber--;
	return true;
	
}

// Returns all the elements in the table as an array of strings.
// *n is the size of the table and it is returned by reference
KeyType *
ArrayDictionary::keys(int * n)
{
	KeyType * a = (KeyType *) malloc(currentNumber * sizeof(KeyType));
	for (int i=0; i<currentNumber; i++) {
		a[i]= array[i].key;
	}

	*n = currentNumber;

	return a;
}
